<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../Common/T4WarningComment.txt" #>
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace PasswordCreator.Models {
    class PasswordItem : INotifyPropertyChanged {
        private readonly ValidationContext _validationContext;
        public event PropertyChangedEventHandler PropertyChanged;

        public PasswordItem() {
			_validationContext = new ValidationContext(this, null, null);
<# foreach(Field x in fields_) { #>
<# if(!string.IsNullOrEmpty(x.DefaultValue)) { #>
			<#= x.Name #> = <#= x.DefaultValue #>;
<# } #>
<# } #>
        }
        protected virtual void RaisePropertyChanged(string propertyName) {
            if (PropertyChanged == null) return;
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
<# foreach(Field x in fields_) { #>
		private <#= x.Type #> _<#= x.Name #>;
		<#= string.IsNullOrEmpty(x.Attribute) ? "" : x.Attribute #>
		<#= string.IsNullOrEmpty(x.Validate) ? "" : x.Validate #>
        public <#= x.Type #> <#= x.Name #> {
			get {
				return _<#= x.Name #>;
			}
			set {
				_validationContext.MemberName = "<#= x.Name #>";
				Validator.ValidateProperty(value, _validationContext);
				_<#= x.Name #> = value;
				RaisePropertyChanged("<#= x.Name #>");
			}
		}
<# } #>

		public void SetProperties (PasswordItem source)
		{
<# foreach(Field x in fields_) { #>
			<#= x.Name #> = source.<#= x.Name #>;
<# } #>
		}

        public object GetColumnValue(string column_name)
        {
            switch (column_name)
            {
<# foreach(Field x in fields_) { #>
				case "<#= x.Name #>":
					return <#= x.Name #>;
<# } #>
                default:
                    return null;
            }
		}
    }
}

<#+
	class Field	{
		public string Name         {set; get;}
		public string Type         {set; get;}
		public string DefaultValue {set; get;}
		public string Attribute    {set; get;}
		public string Validate     {set; get;}
	}
	private static Field[] fields_ = {
		new Field {
			Name         = "SiteName",
			Type         = "string",
			DefaultValue = "",
			Attribute    = "[Key, Column(Order = 0)][Required]",
			Validate     = "[StringLength(100, ErrorMessage=\"100文字以内で設定してください。\")]"
		},
		new Field {
			Name         = "Url",
			Type         = "string",
			DefaultValue = "",
			Attribute    = "",
			Validate     = "[StringLength(200, ErrorMessage=\"200文字以内で設定してください。\")]"
		},
		new Field {
			Name         = "UserId",
			Type         = "string",
			DefaultValue = "",
			Attribute    = "[Key, Column(Order = 1)][Required]",
			Validate     = "[StringLength(50, ErrorMessage=\"50文字以内で設定してください。\")]"
		},
		new Field {
			Name         = "Password",
			Type         = "string",
			DefaultValue = "",
			Attribute    = "",
			Validate     = "[StringLength(64, ErrorMessage=\"64文字以内で設定してください。\")]"
		},
		new Field {
			Name         = "Note",
			Type         = "string",
			DefaultValue = "",
			Attribute    = "",
			Validate     = "[StringLength(100, ErrorMessage=\"100文字以内で設定してください。\")]"
		},
		new Field {
			Name         = "Category",
			Type         = "string",
			DefaultValue = "\"その他\"",
			Attribute    = "",
			Validate     = ""
		},

		new Field {
			Name         = "Date",
			Type         = "DateTime",
			DefaultValue = "DateTime.Now",
			Attribute    = "",
			Validate     = ""
		},
	};
#>
